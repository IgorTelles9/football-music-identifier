# -*- coding: utf-8 -*-"""Spyder EditorThis is a temporary script file."""import osfrom tqdm import tqdmimport numpy as np import matplotlib.pyplot as pltfrom scipy.io import wavfilefrom python_speech_features import mfcc, logfbankimport pandas as pdimport librosa def calc_fft(y, rate):    n = len(y)    freq = np.fft.rfftfreq(n, d=1/rate)    Y = abs(np.fft.rfft(y)/n)    return(Y,freq)def plot_signals(signals):    fig, axis = plt.subplots(nrows=1, ncols=3, sharex=False,                             sharey=True, figsize=(20,5))    fig.suptitle("Time Series", size=16)    i=0    for x in range(3):        axis[x].set_title(list(signals.keys())[i])        axis[x].plot(list(signals.values())[i])        axis[x].get_xaxis().set_visible(False)        axis[x].get_yaxis().set_visible(False)        i+=1def plot_fft(fft):    fig, axis = plt.subplots(nrows=1, ncols=3, sharex=False,                             sharey=True, figsize=(20,5))    fig.suptitle("Fourier Transforms", size=16)    i=0    for x in range(3):        data = list(fft.values())[i]        Y, freq = data[0], data[1]        axis[x].set_title(list(fft.keys())[i])        axis[x].plot(freq,Y)        axis[x].get_xaxis().set_visible(False)        axis[x].get_yaxis().set_visible(False)        i+=1            def plot_fbank(fbank):    fig, axis = plt.subplots(nrows=1, ncols=3, sharex=False,                             sharey=True, figsize=(20,5))    fig.suptitle("Filter Bank Coefficients", size=16)    i=0    for x in range(3):        axis[x].set_title(list(fbank.keys())[i])        axis[x].imshow(list(fbank.values())[i],                          cmap="hot", interpolation="nearest")        axis[x].get_xaxis().set_visible(False)        axis[x].get_yaxis().set_visible(False)        i+=1def plot_mfccs(mfccs):    fig, axis = plt.subplots(nrows=1, ncols=3, sharex=False,                             sharey=True, figsize=(20,5))    fig.suptitle("Mel Frequency Cepstrum Coefficients", size=16)    i=0    for x in range(3):        axis[x].set_title(list(mfccs.keys())[i])        axis[x].imshow(list(mfccs.values())[i],                          cmap="hot", interpolation="nearest")        axis[x].get_xaxis().set_visible(False)        axis[x].get_yaxis().set_visible(False)        i+=1def envelope(y, rate, threshold):    mask = []    y = pd.Series(y).apply(np.abs)    y_mean = y.rolling(window=int(rate/10), min_periods=1, center=True).mean()    for mean in y_mean:        if(mean > threshold):            mask.append(True)        else:            mask.append(False)    return mask        df = pd.read_csv("training.csv")df.set_index("fname", inplace=True)for f in df.index:    rate, signal = wavfile.read("samples/"+f)    df.at[f, "length"] = signal.shape[0]/rateclasses = list(np.unique(df.label))class_dist = df.groupby(["label"])["length"].mean()fig, ax = plt.subplots()ax.set_title("Class Distribution", y=1.08)ax.pie(class_dist, labels=class_dist.index,autopct="%1.1f%%", shadow=False       , startangle=90)ax.axis("equal")plt.show()df.reset_index(inplace=True)signals = {}fft = {} fbank = {}mfccs = {}print("bbbbb")for c in classes:    wav_file = df[df.label == c].iloc[0,0]    signal, rate = librosa.load("samples/"+wav_file, sr=44100)    mask = envelope(signal, rate, 0.0005)    signal = signal[mask]    signals[c] = signal    fft[c] = calc_fft(signal, rate)        bank = logfbank(signal[:rate], rate, nfilt=26, nfft=1103).T    fbank[c] = bank    mel = mfcc(signal[:rate], rate, numcep=13, nfilt=26, nfft=1103).T     mfccs[c] = melprint("ccccc")    plot_signals(signals)plt.show()plot_fft(fft)plt.show()plot_fbank(fbank)plt.show()plot_mfccs(mfccs)plt.show()print("aaaaa")if len(os.listdir("training_files/")) == 0:    for f in tqdm(df.fname):        signal, rate = librosa.load("samples/"+f, sr=16000)        mask = envelope(signal, rate, 0.0005)        wavfile.write(filename="training_files/"+f, rate=rate,                       data=signal[mask])    